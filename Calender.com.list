EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Calender.com -- emu8086 assembler version: 4.08  
 
[ 11/6/2012  --  12:19:46 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       name "Calender"
[   2]        :                                       
[   3]        :                                       ; Irving Derin
[   4]        :                                       ;
[   5]        :                                       ; This is my calender application. It shall use a formula to figure out what the offset of the day is.
[   6]        :                                       ; I shall be using a bitflag variable that shall keep track of important information such as the month,leap year, offset
[   7]        :                                       ; The offset shall determine how many "boxes" need to be offset when starting the calendar. This will be determined
[   8]        :                                       ; by using the formula w = (c + y + m + d) % 7
[   9]        :                                       ; The c and d values are preset by using c = 6 (for 2000 - 2099) and d = 1 (find the first of the month)
[  10]        :                                       ; After that, 6 months shall be shown after the indicated month and year
[  11]        :                                       ; Navigation will allow the user to move back and forth in the months. He may exit by hitting the escape key
[  12]        :                                       ; Page 0 will be an introduction header
[  13]        :                                       ; Page 1 will be a prompt to take the month and date from the user
[  14]        :                                       ; Pages 2 - 7 will be used to display the months
[  15]        :                                       ; Many of the ideas for this code were scrapped together from example code in the emu8086 application
[  16]        :                                       
[  17]        :                                       
[  18]        :                                       org 100h
[  19]        :                                       
[  20]        :                                       ;Variables
[  21]        :                                       
[  22]        :                                       
[  23]    0100: E9 AB 02                              jmp start
[  24]        :                                       
[  25]        :                                       
[  26]    0103: 00                                    currentPage db 0
[  27]        :                                       
[  28]        :                                       ;; MESSAGES ;;
[  29]        :                                       
[  30]    0104: 54 68 61 6E 6B 20 79 6F 75 20 66 6F   page1message1 db "Thank you for opening this application",010,013,
                72 20 6F 70 65 6E 69 6E 67 20 74 68 
                69 73 20 61 70 70 6C 69 63 61 74 69 
                6F 6E 0A 0D                         
[  31]    012C: 54 68 69 73 20 61 70 70 6C 69 63 61   	db "This application was written by Irving Derin",010,013,
                74 69 6F 6E 20 77 61 73 20 77 72 69 
                74 74 65 6E 20 62 79 20 49 72 76 69 
                6E 67 20 44 65 72 69 6E 0A 0D       
[  32]    015A: 4F 6E 20 74 68 65 20 6E 65 78 74 20   	db "On the next page, you shall be asked to enter a month and a year",010,013,
                70 61 67 65 2C 20 79 6F 75 20 73 68 
                61 6C 6C 20 62 65 20 61 73 6B 65 64 
                20 74 6F 20 65 6E 74 65 72 20 61 20 
                6D 6F 6E 74 68 20 61 6E 64 20 61 20 
                79 65 61 72 0A 0D                   
[  33]    019C: 59 6F 75 20 77 69 6C 6C 20 74 68 65   	db "You will then be able to see 6 months of dates",010,013,
                6E 20 62 65 20 61 62 6C 65 20 74 6F 
                20 73 65 65 20 36 20 6D 6F 6E 74 68 
                73 20 6F 66 20 64 61 74 65 73 0A 0D 
                                                    
[  34]    01CC: 42 65 20 61 77 61 72 65 20 74 68 61   	db "Be aware that the range of years is 2000 - 2099",010,013,010,013,
                74 20 74 68 65 20 72 61 6E 67 65 20 
                6F 66 20 79 65 61 72 73 20 69 73 20 
                32 30 30 30 20 2D 20 32 30 39 39 0A 
                0D 0A 0D                            
[  35]    01FF: 46 6F 72 20 74 68 65 20 70 75 72 70   	db "For the purpose of the assignment, entering 2012 as the year", 010,013,
                6F 73 65 20 6F 66 20 74 68 65 20 61 
                73 73 69 67 6E 6D 65 6E 74 2C 20 65 
                6E 74 65 72 69 6E 67 20 32 30 31 32 
                20 61 73 20 74 68 65 20 79 65 61 72 
                0A 0D                               
[  36]    023D: 41 6E 64 20 30 38 20 66 6F 72 20 74   	db "And 08 for the month will be more than enough!", 010, 013,
                68 65 20 6D 6F 6E 74 68 20 77 69 6C 
                6C 20 62 65 20 6D 6F 72 65 20 74 68 
                61 6E 20 65 6E 6F 75 67 68 21 0A 0D 
                                                    
[  37]    026D: 50 72 65 73 73 20 61 6E 79 20 6B 65   	db "Press any key to move on to the next page","$"
                79 20 74 6F 20 6D 6F 76 65 20 6F 6E 
                20 74 6F 20 74 68 65 20 6E 65 78 74 
                20 70 61 67 65 24                   
[  38]        :                                       
[  39]    0297: 50 6C 65 61 73 65 20 65 6E 74 65 72   page2prompt1 db "Please enter year: 20"
                20 79 65 61 72 3A 20 32 30          
[  40]    02AC:                                       page2prompt1Spot:
[  41]    02AC: 45 6E 74 65 72 20 6D 6F 6E 74 68 20   page2prompt2 db "Enter month number(01-12): "
                6E 75 6D 62 65 72 28 30 31 2D 31 32 
                29 3A 20                            
[  42]    02C7:                                       page2prompt2Spot:	
[  43]    02C7: 50 72 65 73 73 20 65 6E 74 65 72 2C   page2prompt3 db "Press enter, then the right arrow key to move onto the next page$"	
                20 74 68 65 6E 20 74 68 65 20 72 69 
                67 68 74 20 61 72 72 6F 77 20 6B 65 
                79 20 74 6F 20 6D 6F 76 65 20 6F 6E 
                74 6F 20 74 68 65 20 6E 65 78 74 20 
                70 61 67 65 24                      
[  44]        :                                       
[  45]        :                                       ;; PRESET VALUES ;;
[  46]        :                                       
[  47]    0308: 1F 1C 1F 1E 1F 1E 1F 1F 1E 1F 1E 1F   noLeap db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                                                    
[  48]        :                                       
[  49]    0314: 1F 1D 1F 1E 1F 1E 1F 1F 1E 1F 1E 1F   Leap   db 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                                                    
[  50]        :                                       
[  51]    0320: 30 31 30 32 30 33 30 34 30 35 30 36   days db "01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"
                30 37 30 38 30 39 31 30 31 31 31 32 
                31 33 31 34 31 35 31 36 31 37 31 38 
                31 39 32 30 32 31 32 32 32 33 32 34 
                32 35 32 36 32 37 32 38 32 39 33 30 
                33 31                               
[  52]        :                                       
[  53]    035E: 53 75 6E 4D 6F 6E 54 75 65 57 65 64   names db "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
                54 68 75 46 72 69 53 61 74          
[  54]        :                                       
[  55]    0373: 4A 61 6E 46 65 62 4D 61 72 41 70 72   months db "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                4D 61 79 4A 75 6E 4A 75 6C 41 75 67 
                53 65 70 4F 63 74 4E 6F 76 44 65 63 
                                                    
[  56]        :                                       
[  57]        :                                       ;; MISC ;;
[  58]        :                                       
[  59]    0397: 05 01 01 04 06 02 04 00 03 05 01 03   monthOff    db  5, 1, 1, 4, 6, 2, 4, 0, 3, 5, 1, 3
                                                    
[  60]        :                                       
[  61]        :                                       ;; VARIABLES ;;
[  62]    03A3: 32 30                                 yearstart db "20"
[  63]    03A5: 00                                    yeardig1 db ?      ; First digit scanned
[  64]    03A6: 00                                    yeardig2 db ?      ; Second digit scanned
[  65]    03A7: 00                                    montdig1 db ?      ; First scanned digit
[  66]    03A8: 00                                    montdig2 db ?      ; Second scanned digit
[  67]    03A9: 00 00                                 leMont  dw ?       ; Final value
[  68]        :                                       
[  69]        :                                       ;; Hacky way to make the year into a string. We just need to play around with the addresses! :P
[  70]    03AB: 00 00                                 leYear  dw ?
[  71]        :                                       
[  72]    03AD: 00                                    dayOff  db ?       ; The result of the day calculation!
[  73]        :                                       
[  74]        :                                       
[  75]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[  76]        :                                       ; Here we are setting up the generic page for the calendar! ;
[  77]        :                                       
[  78]        :                                       
[  79]    03AE:                                       start:
[  80]        :                                       ; Boilerplate for all the fun graphics stuff!
[  81]        :                                       
[  82]    03AE: B8 03 00                              mov ax, 3     ; text mode 80x25, 16 colors, 8 pages (ah=0, al=3)
[  83]    03B1: CD 10                                 int 10h
[  84]        :                                       
[  85]        :                                       ; cancel blinking and enable all 16 colors:
[  86]    03B3: B8 03 10                              mov ax, 1003h
[  87]    03B6: BB 00 00                              mov bx, 0
[  88]    03B9: CD 10                                 int 10h
[  89]        :                                       
[  90]        :                                       
[  91]        :                                       ; Print welcome message using interrupt 21!
[  92]    03BB: BA 04 01                              mov dx, offset page1message1
[  93]    03BE: B4 09                                 mov ah, 9
[  94]    03C0: CD 21                                 int 21h
[  95]        :                                       
[  96]    03C2: 33 C0                                 xor ax,ax  	; Clear the ax register to accept a key entry
[  97]    03C4: CD 16                                 int 16h
[  98]        :                                       
[  99]    03C6: FE 06 03 01                           inc currentPage
[ 100]        :                                       
[ 101]        :                                       
[ 102]        :                                       
[ 103]        :                                       ;; Next Page!
[ 104]    03CA: A0 03 01                              mov al, currentPage
[ 105]    03CD: B4 05                                 mov ah, 05h
[ 106]    03CF: CD 10                                 int 10h
[ 107]        :                                       
[ 108]    03D1: B0 01                                 mov al, 1
[ 109]    03D3: B4 13                                 mov ah, 13h
[ 110]    03D5: B3 07                                 mov bl, 0000_0111b
[ 111]    03D7: 8A 3E 03 01                           mov bh, currentPage
[ 112]    03DB: B9 15 00                              mov cx, page2prompt1Spot - offset page2prompt1
[ 113]    03DE: B2 0A                                 mov dl, 10
[ 114]    03E0: B6 07                                 mov dh, 7
[ 115]    03E2: BD 97 02                              mov bp, offset page2prompt1
[ 116]    03E5: CD 10                                 int 10h
[ 117]        :                                       
[ 118]        :                                       ;; get a character and print it!
[ 119]    03E7: E8 31 01                              call getInOut
[ 120]    03EA: A2 A5 03                              mov yeardig1, al
[ 121]        :                                       
[ 122]    03ED: E8 2B 01                              call getInOut
[ 123]    03F0: A2 A6 03                              mov yeardig2, al
[ 124]        :                                       
[ 125]    03F3: 8A D0                                 mov  dl, al         ;; Push al register into dl -- No need for mem access
[ 126]        :                                       
[ 127]    03F5: A0 A5 03                              mov  al, yeardig1
[ 128]        :                                       
[ 129]    03F8: E8 38 01                              call MakeOneNum
[ 130]    03FB: 89 0E AB 03                           mov leYear, cx
[ 131]    03FF: 80 06 A5 03 30                        add yeardig1, 30h
[ 132]    0404: 80 06 A6 03 30                        add yeardig2, 30h
[ 133]        :                                       
[ 134]        :                                       
[ 135]        :                                       ;; Second line
[ 136]    0409: B0 01                                 mov al, 1
[ 137]    040B: B4 13                                 mov ah, 13h
[ 138]    040D: B3 07                                 mov bl, 0000_0111b
[ 139]    040F: 8A 3E 03 01                           mov bh, currentPage
[ 140]    0413: B9 1B 00                              mov cx, page2prompt2Spot - offset page2prompt2
[ 141]    0416: B2 0A                                 mov dl, 10
[ 142]    0418: B6 08                                 mov dh, 8
[ 143]    041A: BD AC 02                              mov bp, offset page2prompt2
[ 144]    041D: CD 10                                 int 10h
[ 145]        :                                       
[ 146]    041F: E8 F9 00                              call getInOut
[ 147]    0422: A2 A7 03                              mov montdig1, al
[ 148]        :                                       
[ 149]    0425: E8 F3 00                              call getInOut
[ 150]    0428: A2 A8 03                              mov montdig2, al
[ 151]        :                                       
[ 152]    042B: 8A D0                                 mov dl, al
[ 153]    042D: A0 A7 03                              mov al, montdig1
[ 154]        :                                       
[ 155]    0430: E8 00 01                              call MakeOneNum
[ 156]    0433: 89 0E A9 03                           mov leMont, cx
[ 157]        :                                       
[ 158]        :                                       ;; To print this last message, we need to reset the cursor somewhere else!
[ 159]    0437: B6 0A                                 mov dh, 10
[ 160]    0439: B2 09                                 mov dl, 9
[ 161]    043B: B4 02                                 mov ah, 2
[ 162]    043D: CD 10                                 int 10h
[ 163]        :                                       
[ 164]        :                                       ;; Quickly print the next part!
[ 165]    043F: BA C7 02                              mov dx, offset page2prompt3
[ 166]    0442: B4 09                                 mov ah,9
[ 167]    0444: CD 21                                 int 21h
[ 168]        :                                       
[ 169]    0446:                                       wait_on_enter:
[ 170]        :                                       
[ 171]    0446: 33 C0                                 xor ax,ax
[ 172]    0448: CD 16                                 int 16h
[ 173]    044A: 3C 0D                                 cmp al, 0Dh
[ 174]    044C: 75 F8                                 jnz wait_on_enter
[ 175]        :                                       
[ 176]    044E: 8B 1E AB 03                           mov bx, leYear
[ 177]    0452: 8B 0E A9 03                           mov cx, leMont
[ 178]    0456: FF 0E A9 03                           dec leMont
[ 179]        :                                       
[ 180]    045A: E8 ED 00                              call MonthStart ;; We calculate the first date!
[ 181]    045D: A2 AD 03                              mov dayOff, al
[ 182]        :                                       
[ 183]        :                                       
[ 184]    0460:                                       keyControl:
[ 185]        :                                       
[ 186]    0460: 32 E4                                 xor ah,ah
[ 187]    0462: CD 16                                 int 16h
[ 188]        :                                       
[ 189]    0464: 80 FC 4B                              cmp ah, 4Bh      ;; Left arrow key pressed!
[ 190]    0467: 74 33                                 je goBack
[ 191]        :                                       
[ 192]    0469: 80 FC 4D                              cmp ah, 4Dh      ;; Right Arrow key pressed!
[ 193]    046C: 74 4F                                 je goNext
[ 194]        :                                       
[ 195]        :                                       
[ 196]    046E: EB F0                                 jmp keyControl
[ 197]        :                                       
[ 198]    0470:                                       postControl:
[ 199]    0470: 83 3E A9 03 0D                        cmp leMont,13
[ 200]    0475: 74 60                                 je newYear
[ 201]        :                                       
[ 202]        :                                       
[ 203]        :                                       ;; Call the offset function!
[ 204]    0477: 53                                    push bx
[ 205]    0478: 51                                    push cx
[ 206]    0479: 50                                    push ax
[ 207]        :                                       
[ 208]    047A: 8B 0E A9 03                           mov cx, leMont
[ 209]    047E: 8B 1E AB 03                           mov bx, leYear
[ 210]        :                                       
[ 211]    0482: E8 C5 00                              call MonthStart
[ 212]        :                                       
[ 213]    0485: A2 AD 03                              mov dayOff, al
[ 214]    0488: 58                                    pop ax
[ 215]    0489: 59                                    pop cx
[ 216]    048A: 5B                                    pop bx
[ 217]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 218]        :                                       
[ 219]    048B: E8 E3 00                              call PrintPage
[ 220]        :                                       
[ 221]    048E: 80 3E 03 01 07                        cmp currentPage, 7
[ 222]        :                                       
[ 223]    0493: 74 02                                 je lastPage         ;; If this is the last page, prepare to quit!
[ 224]        :                                       
[ 225]    0495: EB C9                                 jmp keyControl
[ 226]        :                                       
[ 227]        :                                       
[ 228]    0497:                                       lastPage:
[ 229]    0497: 33 C0                                 xor ax,ax
[ 230]    0499: CD 16                                 int 16h
[ 231]        :                                       
[ 232]    049B: C3                                    ret
[ 233]        :                                       
[ 234]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 235]        :                                       ;  Control Lables
[ 236]        :                                       
[ 237]    049C:                                       goBack:
[ 238]    049C: 80 3E 03 01 02                        cmp currentPage, 2 ;; If you're on the first page, don't go back!
[ 239]    04A1: 74 BD                                 je keyControl
[ 240]        :                                       
[ 241]    04A3: 83 3E A9 03 00                        cmp leMont, 0
[ 242]    04A8: 74 44                                 je lastYear
[ 243]    04AA: FF 0E A9 03                           dec leMont
[ 244]        :                                       
[ 245]    04AE:                                       prevPage:
[ 246]    04AE: 50                                    push ax
[ 247]    04AF: B4 05                                 mov ah, 05h
[ 248]    04B1: FE 0E 03 01                           dec currentPage
[ 249]    04B5: A0 03 01                              mov al, currentPage
[ 250]    04B8: CD 10                                 int 10h
[ 251]    04BA: 58                                    pop ax
[ 252]        :                                       
[ 253]    04BB: EB A3                                 jmp keyControl
[ 254]        :                                       
[ 255]    04BD:                                       goNext:
[ 256]        :                                       
[ 257]    04BD: 83 3E A9 03 0D                        cmp leMont, 13
[ 258]    04C2: 74 13                                 je newYear
[ 259]        :                                       
[ 260]    04C4: FF 06 A9 03                           inc leMont
[ 261]        :                                       
[ 262]        :                                       
[ 263]    04C8:                                       nextPage:
[ 264]    04C8: 50                                    push ax
[ 265]    04C9: B4 05                                 mov ah, 05h
[ 266]    04CB: FE 06 03 01                           inc currentPage
[ 267]        :                                       
[ 268]    04CF: A0 03 01                              mov al, currentPage
[ 269]    04D2: CD 10                                 int 10h
[ 270]    04D4: 58                                    pop ax
[ 271]        :                                       
[ 272]    04D5: EB 99                                 jmp postControl
[ 273]        :                                       
[ 274]    04D7:                                       newYear:    ;; Only happens moving forwards!
[ 275]    04D7: 80 3E A6 03 39                        cmp yeardig2, "9"
[ 276]    04DC: 74 27                                 je add2digs
[ 277]        :                                       
[ 278]    04DE: FE 06 A6 03                           inc yeardig2
[ 279]    04E2:                                       newYearRet:
[ 280]        :                                       
[ 281]    04E2: C7 06 A9 03 01 00                     mov leMont, 1
[ 282]    04E8: FF 06 AB 03                           inc leYear
[ 283]        :                                       
[ 284]    04EC: EB DA                                 jmp nextPage
[ 285]        :                                       
[ 286]    04EE:                                       lastYear:   ;; Only happens moving backwards!
[ 287]    04EE: 80 3E A6 03 30                        cmp yeardig2, "0"
[ 288]    04F3: 74 1B                                 je sub2digs
[ 289]        :                                       
[ 290]    04F5: FE 0E A6 03                           dec yeardig2
[ 291]        :                                       
[ 292]    04F9:                                       lastYearRet:
[ 293]    04F9: C7 06 A9 03 0B 00                     mov leMont, 11
[ 294]    04FF: FF 0E AB 03                           dec leYear
[ 295]        :                                       
[ 296]    0503: EB A9                                 jmp prevPage
[ 297]        :                                       
[ 298]        :                                       
[ 299]    0505:                                       add2digs:
[ 300]    0505: C6 06 A6 03 30                        mov yeardig2, "0"
[ 301]    050A: FE 06 A5 03                           inc yeardig1
[ 302]    050E: EB D2                                 jmp newYearRet
[ 303]        :                                       
[ 304]    0510:                                       sub2digs:
[ 305]    0510: C6 06 A6 03 39                        mov yeardig2, "9"
[ 306]    0515: FE 0E A5 03                           dec yeardig1
[ 307]    0519: EB DE                                 jmp lastYearRet
[ 308]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 309]        :                                       ;Procedures                                                                  ;
[ 310]        :                                       
[ 311]    051B:                                       PROC getInOut       ;This procedure shall take a char from the screen, print it on the next cursor spot, and then leave the dec number in al
[ 312]        :                                       
[ 313]    051B: 33 C0                                 xor ax,ax
[ 314]        :                                       
[ 315]    051D: CD 16                                 int 16h
[ 316]    051F: B4 0A                                 mov ah, 0Ah
[ 317]    0521: B9 01 00                              mov cx, 1
[ 318]    0524: CD 10                                 int 10h
[ 319]        :                                       
[ 320]        :                                       
[ 321]    0526: B4 03                                 mov ah, 03h
[ 322]        :                                       
[ 323]    0528: CD 10                                 int 10h
[ 324]    052A: FE C2                                 inc dl
[ 325]    052C: B4 02                                 mov ah,2
[ 326]    052E: CD 10                                 int 10h
[ 327]        :                                       
[ 328]    0530: 2C 30                                 sub al, 30h
[ 329]        :                                       
[ 330]    0532: C3                                    ret
[ 331]        :                                       
[ 332]        :                                       ENDP getInOut
[ 333]        :                                       
[ 334]        :                                       
[ 335]        :                                       ;Place the two digits you'd like to make into 1. Top value into AL, lower value into DL, gather result inside of CX
[ 336]    0533:                                       PROC MakeOneNum
[ 337]        :                                       
[ 338]    0533: 50                                    push ax
[ 339]    0534: 53                                    push bx
[ 340]    0535: 52                                    push dx
[ 341]        :                                       
[ 342]    0536: 32 E4                                 xor ah,ah   ; Clear the top portion of the AH
[ 343]    0538: 32 F6                                 xor dh,dh   ; Clear the top portion of the DH
[ 344]        :                                       
[ 345]    053A: D1 E0                                 shl ax, 1   ; Doubling AX
[ 346]    053C: 8B C8                                 mov cx, ax  ; Move that value to CX
[ 347]    053E: D1 E0 D1 E0                           shl ax, 2   ; Now *8 the original value!
[ 348]    0542: 03 C8                                 add cx, ax  ; x*8 + x*2 = x*10!
[ 349]    0544: 03 CA                                 add cx, dx  ; Add it to the value of dx, or the ones place digit. And we're good! :D
[ 350]        :                                       
[ 351]    0546: 5A                                    pop dx
[ 352]    0547: 5B                                    pop bx
[ 353]    0548: 58                                    pop ax
[ 354]        :                                       
[ 355]    0549: C3                                    ret
[ 356]        :                                       
[ 357]        :                                       ENDP MakeOneNum
[ 358]        :                                       
[ 359]        :                                       ;; Calculate the first of the month that was requested!
[ 360]        :                                       ;; to do this, put the year into BX
[ 361]        :                                       ;; put the month into CX
[ 362]        :                                       ;; collect in AL
[ 363]        :                                       
[ 364]        :                                       ;; The formula (y + y/4 + MI + d) % 7
[ 365]        :                                       ;; Because we are using the first of each month, we make d = 1
[ 366]        :                                       ;; MI is equal to the month index, which is calculated by using
[ 367]        :                                       ;; a formula created by Hans Lachman.
[ 368]        :                                       ;; MI = ( (Month * 2.56 + 94) % 100 ) % 7
[ 369]        :                                       ;; I've premade this array in montOff
[ 370]        :                                       ;; We then find the year that had the last leap year. and divide by 4
[ 371]        :                                       ;; To do this, we shift right by 2, and what ever number we have suffices!
[ 372]        :                                       ;; The final formula becomes w = (y + y/4 + MI + 1)
[ 373]        :                                       
[ 374]        :                                       
[ 375]    054A:                                       PROC MonthStart
[ 376]        :                                       
[ 377]    054A: 53                                    push bx     ;; This is the year
[ 378]    054B: 51                                    push cx     ;; This is the month!
[ 379]        :                                       
[ 380]    054C: 49                                    dec cx      ;; For proper index
[ 381]        :                                       
[ 382]    054D: 81 C3 D0 07                           add bx, 2000 ;; This is giving us the absolute year
[ 383]        :                                       
[ 384]    0551: BE 97 03                              lea si, monthOff  ;; Load the month offset array!
[ 385]    0554: 03 F1                                 add si, cx        ;; Get the month offset first
[ 386]    0556: 8A 0C                                 mov cl, [si]      ;; move the offset to CX
[ 387]        :                                       
[ 388]    0558: 8B C3                                 mov ax, bx      ;; Move the year into ax
[ 389]    055A: D1 EB D1 EB                           shr bx, 2       ;; divide the year by 4
[ 390]    055E: 03 C3                                 add ax, bx      ;; add the two now
[ 391]    0560: 03 C1                                 add ax, cx      ;; get the month offset from cx
[ 392]    0562: 40                                    inc ax          ;; Since we need the first, we add 1
[ 393]        :                                       
[ 394]    0563: 52                                    push dx
[ 395]    0564: 33 D2                                 xor dx, dx      ;; clear dx
[ 396]    0566: B9 07 00                              mov cx, 7       ;; we're moduloing, so get 7 into cx
[ 397]    0569: F7 F1                                 div cx          ;; ax / cx
[ 398]    056B: 8A C2                                 mov al, dl      ;; we're returning the answer in ax
[ 399]    056D: 5A                                    pop dx          ;; return it back to how it was!
[ 400]        :                                       
[ 401]    056E: 59                                    pop cx          ;; put it all back!
[ 402]    056F: 5B                                    pop bx          ;; BACK TO HOW IT WAS NAOW!!!!
[ 403]        :                                       
[ 404]    0570: C3                                    ret
[ 405]        :                                       
[ 406]        :                                       ENDP MonthStart
[ 407]        :                                       
[ 408]        :                                       ;; This is a function tha shall print out the calendar itself!
[ 409]        :                                       ;; To use this function, you will have to place the year into BX
[ 410]        :                                       ;; Into cx, you shall contain the month
[ 411]        :                                       ;; inside AL, you already have the first month's offset
[ 412]        :                                       ;; This is the day on which you will start!
[ 413]        :                                       ;; The main method of printing the calendar will be through
[ 414]        :                                       ;; the use of cursors and interrupts. This is for simplicity
[ 415]        :                                       ;; NOTE!!! This only prints it out, it does NOT display it
[ 416]        :                                       ;; For that you need to go and press buttons as defined in the main
[ 417]        :                                       ;; progession loop
[ 418]        :                                       
[ 419]        :                                       
[ 420]    0571:                                       PROC PrintPage
[ 421]        :                                       
[ 422]    0571: 60                                    pusha   ;; Just covering our bases!
[ 423]        :                                       
[ 424]    0572: BD 73 03                              lea bp, months
[ 425]        :                                       
[ 426]    0575: A1 A9 03                              mov ax, leMont      ; Move our month over to ax
[ 427]    0578: 48                                    dec ax              ; Make it one less for use as an index!
[ 428]        :                                       
[ 429]    0579: BB 03 00                              mov bx, 3
[ 430]    057C: F7 E3                                 mul bx
[ 431]        :                                       
[ 432]    057E: 03 E8                                 add bp, ax          ; add the offset so that we can print the month now!
[ 433]        :                                       
[ 434]        :                                       
[ 435]        :                                       ;; Prints out the month name!
[ 436]    0580: 8A 3E 03 01                           mov bh, currentPage
[ 437]    0584: B3 07                                 mov bl, 0000_0111b
[ 438]    0586: B4 13                                 mov ah, 13h
[ 439]    0588: B0 01                                 mov al, 1
[ 440]    058A: B2 21                                 mov dl, 33
[ 441]    058C: B6 00                                 mov dh, 0
[ 442]    058E: B9 03 00                              mov cx, 3
[ 443]    0591: CD 10                                 int 10h
[ 444]        :                                       
[ 445]        :                                       ;; Print out the year!
[ 446]    0593: BD A3 03                              lea bp, yearstart
[ 447]    0596: B4 13                                 mov ah, 13h
[ 448]    0598: B0 01                                 mov al, 1
[ 449]    059A: B6 00                                 mov dh, 0
[ 450]    059C: B2 25                                 mov dl, 37        ;; This line does nothing O_o
[ 451]    059E: B9 04 00                              mov cx, 4        ;; We have a 5 character string!
[ 452]    05A1: CD 10                                 int 10h
[ 453]        :                                       
[ 454]        :                                       
[ 455]        :                                       ;; Print out the days!
[ 456]    05A3: BD 5E 03                              lea bp, names
[ 457]    05A6: B9 07 00                              mov cx, 7
[ 458]        :                                       
[ 459]    05A9: B6 02                                 mov dh, 2
[ 460]    05AB: B2 0A                                 mov dl, 10
[ 461]        :                                       
[ 462]        :                                       
[ 463]    05AD: 55                                    push bp
[ 464]    05AE: 52                                    push dx
[ 465]        :                                       
[ 466]    05AF:                                       printDaysWeek:
[ 467]    05AF: 5A                                    pop dx
[ 468]    05B0: 5D                                    pop bp
[ 469]    05B1: 51                                    push cx
[ 470]        :                                       
[ 471]    05B2: B0 01                                 mov al, 1
[ 472]    05B4: B4 13                                 mov ah, 13h
[ 473]    05B6: B9 03 00                              mov cx, 3
[ 474]    05B9: CD 10                                 int 10h
[ 475]    05BB: 80 C2 05                              add dl, 5
[ 476]    05BE: 83 C5 03                              add bp, 3
[ 477]        :                                       
[ 478]    05C1: 59                                    pop cx
[ 479]    05C2: 55                                    push bp
[ 480]    05C3: 52                                    push dx
[ 481]        :                                       
[ 482]    05C4: E2 E9                                 loop printDaysWeek
[ 483]        :                                       
[ 484]    05C6: 5A                                    pop dx
[ 485]    05C7: 5D                                    pop bp
[ 486]        :                                       
[ 487]        :                                       
[ 488]        :                                       ;; Now we shall start to print out the dates
[ 489]        :                                       
[ 490]        :                                       
[ 491]    05C8: A1 AB 03                              mov ax, leYear
[ 492]    05CB: 25 03 00                              and ax, 3            ;; Check to see if it's a leap year
[ 493]    05CE: 75 05                                 jnz notLeapYear
[ 494]        :                                       
[ 495]    05D0: BD 14 03                              lea bp, Leap
[ 496]    05D3: EB 03                                 jmp loadDays
[ 497]        :                                       
[ 498]    05D5:                                       notLeapYear:
[ 499]    05D5: BD 08 03                              lea bp, noLeap
[ 500]        :                                       
[ 501]        :                                       
[ 502]    05D8:                                       loadDays:
[ 503]    05D8: 03 2E A9 03                           add bp, leMont      ;; Add the month offset
[ 504]    05DC: 4D                                    dec bp
[ 505]    05DD: 8A 4E 00                              mov cl, [bp]      ;; Move the number of days in the month into cx from the array!
[ 506]        :                                       
[ 507]    05E0: BD 20 03                              lea bp, days      ;; Move the days array into bp
[ 508]        :                                       
[ 509]        :                                       
[ 510]    05E3:                                       printFirstRow:
[ 511]    05E3: B8 07 00                              mov ax, 7       ;; seven days
[ 512]    05E6: 2A 06 AD 03                           sub al, dayOff  ;; Yields
[ 513]    05EA: 2A C8                                 sub cl, al      ;; Number of days in the other rows!
[ 514]    05EC: 51                                    push cx         ;; save that number now! Days in month
[ 515]        :                                       
[ 516]    05ED: 8A C8                                 mov cl, al      ;; Days on that line!
[ 517]        :                                       
[ 518]    05EF: B2 0A                                 mov dl, 10
[ 519]    05F1: B6 05                                 mov dh, 5
[ 520]        :                                       
[ 521]    05F3: 51                                    push cx  ;; save le counter
[ 522]        :                                       
[ 523]    05F4: 8A 0E AD 03                           mov cl, dayOff  ;; Blank spaces
[ 524]    05F8: 52                                    push dx
[ 525]    05F9:                                       offsetDays:
[ 526]    05F9: 5A                                    pop dx
[ 527]        :                                       
[ 528]    05FA: 80 C2 08                              add dl, 8
[ 529]        :                                       
[ 530]    05FD: 52                                    push dx
[ 531]    05FE: E2 F9                                 loop offsetDays
[ 532]    0600: 5A                                    pop dx
[ 533]    0601: 59                                    pop cx         ;; get days on the list!
[ 534]        :                                       
[ 535]    0602: 52                                    push dx
[ 536]    0603: 55                                    push bp
[ 537]        :                                       
[ 538]    0604:                                       printFirstNums:
[ 539]    0604: 5D                                    pop bp
[ 540]    0605: 5A                                    pop dx
[ 541]    0606: 51                                    push cx     ;; Push the days on the list
[ 542]    0607: B0 01                                 mov al,1
[ 543]    0609: B4 13                                 mov ah, 13h
[ 544]    060B: B9 02 00                              mov cx, 2
[ 545]    060E: CD 10                                 int 10h
[ 546]    0610: 80 C2 06                              add dl, 6
[ 547]    0613: 83 C5 02                              add bp, 2
[ 548]        :                                       
[ 549]    0616: 59                                    pop cx      ;; Get them back
[ 550]    0617: 52                                    push dx
[ 551]    0618: 55                                    push bp
[ 552]        :                                       
[ 553]    0619: E2 E9                                 loop printFirstNums
[ 554]        :                                       
[ 555]    061B: 5D                                    pop bp
[ 556]    061C: 5A                                    pop dx
[ 557]        :                                       ;;;;;;;;;;;;;
[ 558]        :                                       
[ 559]    061D: 80 C6 03                              add dh, 3     ;; We're going down a row, or 3
[ 560]    0620: B2 0A                                 mov dl, 10    ;; Back to the start!
[ 561]        :                                       
[ 562]    0622: 59                                    pop cx
[ 563]    0623: 80 E9 15                              sub cl, 21 ;; three rows = three weeks = 21 days
[ 564]    0626: 51                                    push cx
[ 565]        :                                       
[ 566]    0627: B9 03 00                              mov cx, 3  ;; We need to make three rows, lets go!
[ 567]        :                                       
[ 568]    062A:                                       printMidRows:
[ 569]    062A: 51                                    push cx
[ 570]    062B: B9 07 00                              mov cx, 7 ;; We've got 7 days in each week
[ 571]        :                                       
[ 572]    062E: 55                                    push bp
[ 573]    062F: 52                                    push dx
[ 574]        :                                       
[ 575]    0630:                                       printMidNumbers:
[ 576]        :                                       
[ 577]    0630: 5A                                    pop dx
[ 578]    0631: 5D                                    pop bp
[ 579]    0632: 51                                    push cx
[ 580]        :                                       
[ 581]    0633: B0 01                                 mov al, 1
[ 582]    0635: B4 13                                 mov ah, 13h
[ 583]    0637: B9 02 00                              mov cx, 2
[ 584]    063A: CD 10                                 int 10h
[ 585]    063C: 80 C2 06                              add dl, 6
[ 586]    063F: 83 C5 02                              add bp, 2
[ 587]        :                                       
[ 588]    0642: 59                                    pop cx
[ 589]    0643: 55                                    push bp
[ 590]    0644: 52                                    push dx
[ 591]        :                                       
[ 592]    0645: E2 E9                                 loop printMidNumbers
[ 593]        :                                       
[ 594]    0647: 5A                                    pop dx
[ 595]    0648: 5D                                    pop bp
[ 596]        :                                       
[ 597]    0649: 80 C6 03                              add dh, 3
[ 598]    064C: B2 0A                                 mov dl, 10
[ 599]        :                                       
[ 600]    064E: 59                                    pop cx
[ 601]    064F: E2 D9                                 loop printMidRows
[ 602]        :                                       
[ 603]    0651: B2 0A                                 mov dl, 10
[ 604]        :                                       
[ 605]    0653: 59                                    pop cx
[ 606]        :                                       
[ 607]    0654: 83 F9 07                              cmp cx, 7
[ 608]        :                                       
[ 609]    0657: 7E 28                                 jng PreprintLastRow
[ 610]        :                                       ;; if we have more than 5 rows
[ 611]        :                                       
[ 612]    0659: 83 E9 07                              sub cx, 7  ;; Subtract from the counter, this is our little tail :D
[ 613]        :                                       
[ 614]    065C: 51                                    push cx    ;; push the tail into stack
[ 615]    065D: B9 07 00                              mov cx, 7
[ 616]        :                                       
[ 617]    0660: 55                                    push bp
[ 618]    0661: 52                                    push dx
[ 619]    0662:                                       printAnotherRow:
[ 620]    0662: 5A                                    pop dx
[ 621]    0663: 5D                                    pop bp
[ 622]    0664: 51                                    push cx
[ 623]        :                                       
[ 624]    0665: B0 01                                 mov al, 1
[ 625]    0667: B4 13                                 mov ah, 13h
[ 626]    0669: B9 02 00                              mov cx, 2
[ 627]    066C: CD 10                                 int 10h
[ 628]    066E: 80 C2 06                              add dl, 6
[ 629]    0671: 83 C5 02                              add bp, 2
[ 630]        :                                       
[ 631]    0674: 59                                    pop cx
[ 632]    0675: 55                                    push bp
[ 633]    0676: 52                                    push dx
[ 634]        :                                       
[ 635]    0677: E2 E9                                 loop printAnotherRow
[ 636]    0679: 5A                                    pop dx
[ 637]    067A: 5D                                    pop bp
[ 638]        :                                       
[ 639]    067B: B2 0A                                 mov dl, 10
[ 640]    067D: 80 C6 03                              add dh, 3
[ 641]        :                                       
[ 642]        :                                       
[ 643]    0680: 59                                    pop cx    ;; Get the tail!
[ 644]        :                                       
[ 645]    0681:                                       PreprintLastRow:
[ 646]    0681: 52                                    push dx
[ 647]    0682: 55                                    push bp
[ 648]        :                                       
[ 649]    0683:                                       printLastRow:
[ 650]    0683: 5D                                    pop bp
[ 651]    0684: 5A                                    pop dx
[ 652]    0685: 51                                    push cx
[ 653]        :                                       
[ 654]    0686: B0 01                                 mov al, 1
[ 655]    0688: B4 13                                 mov ah, 13h
[ 656]    068A: B9 02 00                              mov cx, 2
[ 657]    068D: CD 10                                 int 10h
[ 658]    068F: 80 C2 06                              add dl, 6
[ 659]    0692: 83 C5 02                              add bp, 2
[ 660]        :                                       
[ 661]    0695: 59                                    pop cx
[ 662]    0696: 52                                    push dx
[ 663]    0697: 55                                    push bp
[ 664]        :                                       
[ 665]    0698: E2 E9                                 loop printLastRow
[ 666]        :                                       
[ 667]    069A: 5D                                    pop bp
[ 668]    069B: 5A                                    pop dx
[ 669]        :                                       
[ 670]        :                                       
[ 671]        :                                       
[ 672]    069C: 61                                    popa
[ 673]        :                                       
[ 674]    069D: C3                                    ret
[ 675]        :                                       
[ 676]        :                                       ENDP PrintPage
[ 677]        :                                       
[ 678]        :                                       
[ 679]        :                                       
[ 680]        :                                       
[ 681]        :                                       
 
===================================================================================================
 




===================================================================================================
